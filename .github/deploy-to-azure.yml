name: Deploy InsightRFQ to Azure App Service

on:
  push:
    branches:
      - main  # IMPORTANT: Change to 'master' if your main GitHub branch is named master
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab

env:
  AZURE_WEBAPP_NAME: ThinkTank-RFP-ANALYSER    # <<< YOUR EXACT AZURE APP SERVICE NAME
  PYTHON_VERSION: '3.9'                     # <<< PYTHON VERSION CONFIGURED ON YOUR APP SERVICE
  WORKING_DIRECTORY: '.'                     # Root of your repository where app.py, requirements.txt etc. are

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use an Ubuntu runner for the job
    
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }} # Sets default working directory for subsequent 'run' steps

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4 # Step 1: Gets your code from the repository

    - name: Set up Python version
      uses: actions/setup-python@v5 # Step 2: Sets up the Python version specified in env
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip' # Cache pip dependencies to speed up future builds

    - name: Install dependencies
      run: | # Step 3: Installs packages from requirements.txt into the runner's environment
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Dependencies installed on runner successfully."
    
    - name: Archive application files for deployment
      # This step creates a zip file of your application, excluding unnecessary files/folders.
      # Azure App Service deployment often works best with a zip package.
      run: |
        echo "Zipping application files..."
        # The path to the zip file will be relative to the GitHub Actions runner's workspace root,
        # which is one level above the working_directory if working_directory is '.'
        # So, we output the zip to '../release.zip'
        zip -r ../release.zip . -x ".venv/*" -x ".git/*" -x ".github/*" -x "**/__pycache__/*" -x "*.pyc" -x "*.DS_Store" -x ".env*" -x "deploy.zip" -x "release.zip"
        echo "Application files zipped to release.zip in parent directory of workspace."
        echo "Verifying contents of the zip (top-level):"
        unzip -l ../release.zip | head -n 20 # Shows top-level contents of the zip for verification
        echo "Zip file created successfully."

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3 # Step 4: Deploys the package to Azure App Service
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # Uses the secret you created in GitHub repository settings
        package: ../release.zip # Deploy the zip file created in the previous step
        # The startup command should be picked from your Procfile or what's set in Azure App Service Configuration.
        # If still having issues after deployment, you can try explicitly setting it here:
        # startup-command: 'streamlit run app.py --server.port 8000 --server.enableCORS false --server.enableXsrfProtection false'
